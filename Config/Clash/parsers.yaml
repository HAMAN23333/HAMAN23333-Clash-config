parsers: # array
  # - reg: ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
  - reg: ^.*$
  # 删除服务商提供的策略组和规则
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const proxies = yaml.parse(raw).proxies
        return yaml.stringify({ 'proxies': proxies })
      } 
  # 建立自己的配置
    yaml:
      prepend-proxy-groups: # 建立策略组

        - name: 🔰 选择节点 
          type: select

        - name: 🍎 Apple
          type: select
          proxies:
            - 🔰 选择节点 
            - DIRECT

        - name: 💻 Microsoft
          type: select
          proxies:
            - 🔰 选择节点 
            - DIRECT

        - name: 🤖 Google
          type: select
          proxies:
            - 🔰 选择节点 

        - name: 🕹️ Game
          type: select
          proxies:
            - 🔰 选择节点 
            - DIRECT

        - name: ✈️ Telegram
          type: select
          proxies:
            - 🔰 选择节点 

        - name: 📺 BiliBili
          type: select
          proxies:
            - 🔰 选择节点 
            - DIRECT

        - name: ⚡ 下载
          type: select
          proxies:
            - 🔰 选择节点 
            - DIRECT

        - name: 📰 国内网站
          type: select
          proxies:
            - 🔰 选择节点 
            - DIRECT

        - name: 🐟 漏网之鱼
          type: select
          proxies:
            - 🔰 选择节点 
            - DIRECT

        - name: 🇭🇰 香港
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT

        - name: 🇹🇼 台湾
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT

        - name: 🇯🇵 日本
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT

        - name: 🇺🇲 美国
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT

        - name: 🇸🇬 狮城
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT

        - name: 🇩🇪 德国
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT

        - name: 🇬🇧 英国
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT

        - name: 🇦🇺 澳洲
          type: fallback
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - REJECT
            
  # 策略组示例
       # - name: 分组名
         # type: select       # 手动选点   
               # url-test     # 自动选择延迟最低的节点
               # fallback     # 节点故障时自动切换下一个
               # laod-balance # 均衡使用分组内的节点
         # url: http://www.gstatic.com/generate_204 # 测试地址 非select类型分组必要
         # interval: 300 # 自动测试间隔时间，单位秒 非select类型分组必要
         # tolerance: 50 # 允许的偏差，节点之间延迟差小于该值不切换 非必要
         # proxies:  
           # - 节点名称或其他分组套娃
          
      commands:
        - proxy-groups.🇭🇰 香港.proxies.0+[]proxyNames|^(.*)(港|HK|Hong Kong|🇭🇰)+(.*)$
        - proxy-groups.🇹🇼 台湾.proxies.0+[]proxyNames|^(.*)(台|新北|彰化|TW|Taiwan|🇹🇼)+(.*)$
        - proxy-groups.🇯🇵 日本.proxies.0+[]proxyNames|^(.*)(日本|川日|东京|大阪|泉日|埼玉|沪日|深日|[^-]日|JP|Japan|🇯🇵)+(.*)$
        - proxy-groups.🇺🇲 美国.proxies.0+[]proxyNames|^(.*)(美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States|🇺🇲)+(.*)$
        - proxy-groups.🇸🇬 狮城.proxies.0+[]proxyNames|^(.*)(新加坡|坡|狮城|SG|Singapore|🇸🇬)+(.*)$
        - proxy-groups.🇩🇪 德国.proxies.0+[]proxyNames|^(.*)(德|Germany|DE|柏林|慕尼黑|🇩🇪)+(.*)$
        - proxy-groups.🇬🇧 英国.proxies.0+[]proxyNames|^(.*)(英|Britain|伦敦|🇬🇧)+(.*)$
        - proxy-groups.🇦🇺 澳洲.proxies.0+[]proxyNames|^(.*)(澳|Australia|AU|墨尔本|悉尼|🇦🇺)+(.*)$
        
        - proxy-groups.🔰 选择节点.proxies=[]proxyNames # 向指定策略组添加订阅中的节点名，可使用正则过滤
        - proxy-groups.🔰 选择节点.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        - proxy-groups.🍎 Apple.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        - proxy-groups.💻 Microsoft.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        - proxy-groups.🤖 Google.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        - proxy-groups.🕹️ Game.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        - proxy-groups.✈️ Telegram.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        - proxy-groups.📺 BiliBili.proxies.0+[]groupNames|^(.*)(港|台)+(.*)$
        - proxy-groups.⚡ 下载.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        - proxy-groups.📰 国内网站.proxies.0+[]groupNames|^(.*)(港|德|日|美|台|狮|英|澳)+(.*)$
        # - proxy-groups.🔰 选择节点.proxies.0+DIRECT # 向指定分组第一个位置添加一个 DIRECT 节点名
        
        # 一些可能用到的正则过滤节点示例，使分组更细致
        # []proxyNames|a                         # 包含a
        # []proxyNames|^(.*)(a|b)+(.*)$          # 包含a或b
        # []proxyNames|^(?=.*a)(?=.*b).*$        # 包含a和b
        # []proxyNames|^((?!b).)*a((?!b).)*$     # 包含a且不包含b
        # []proxyNames|^((?!b|c).)*a((?!b|c).)*$ # 包含a且不包含b或c
        
  # 添加规则
      prepend-rules: # 规则由上往下遍历，如上面规则已经命中，则不再往下处理
        - DOMAIN,clash.razord.top,DIRECT
        - DOMAIN,yacd.haishan.me,DIRECT
        - RULE-SET,Lan,DIRECT
        - if: (not(match_provider("Direct"))) and (match_provider("Advertising") or match_provider("Advertising_Domain")) # 逻辑判断，需要新版本clash premium 2023.5.19版本以上内核的支持
          name: AD
          rules: 
            - MATCH,REJECT
        - RULE-SET,Download,⚡ 下载
        - RULE-SET,PrivateTracker,⚡ 下载
        - RULE-SET,Game,🕹️ Game
        - RULE-SET,GitHub,💻 Microsoft
        - RULE-SET,Microsoft,💻 Microsoft
        - RULE-SET,YouTube,🤖 Google
        - RULE-SET,Google,🤖 Google
        - RULE-SET,Telegram,✈️ Telegram
        - RULE-SET,Apple,🍎 Apple
        - RULE-SET,Apple_Domain,🍎 Apple
        - RULE-SET,BiliBili,📺 BiliBili
        - RULE-SET,Bahamut,🇹🇼 台湾
        - RULE-SET,ChinaMax,📰 国内网站
        - RULE-SET,ChinaMax_IP,📰 国内网站
        - RULE-SET,ChinaMax_Domain,📰 国内网站
        - MATCH,🐟 漏网之鱼 # 规则之外的
  # 添加规则集
      mix-rule-providers: 

        Direct: # 广告放行
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Direct/Direct.yaml"
          interval: 86400
          path: ./ruleset/Direct.yaml  

        Advertising_Domain:
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Advertising/Advertising_Domain.yaml"
          interval: 86400
          path: ./ruleset/Advertising_Domain.yaml 

        Advertising:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Advertising/Advertising.yaml"
          interval: 86400
          path: ./ruleset/Advertising.yaml        

        GitHub:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml"
          interval: 86400
          path: ./ruleset/GitHub.yaml

        Microsoft:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Microsoft/Microsoft.yaml"
          interval: 86400
          path: ./ruleset/Microsoft.yaml
        
        Apple_Domain:
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Apple/Apple_Domain.yaml"
          interval: 86400
          path: ./ruleset/Apple_Domain.yaml

        Apple:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Apple/Apple.yaml"
          interval: 86400
          path: ./ruleset/Apple.yaml

        Game:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Game/Game.yaml"
          interval: 86400
          path: ./ruleset/Game.yaml

        BiliBili:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/BiliBili/BiliBili.yaml"
          interval: 86400
          path: ./ruleset/BiliBili.yaml
        
        YouTube:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/YouTube/YouTube.yaml"
          interval: 86400
          path: ./ruleset/YouTube.yaml

        Google:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Google/Google.yaml"
          interval: 86400
          path: ./ruleset/Google.yaml
          
        Bahamut:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Bahamut/Bahamut.yaml"
          interval: 86400
          path: ./ruleset/Bahamut.yaml

        Telegram:
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Telegram/Telegram.yaml"
          interval: 86400
          path: ./ruleset/Telegram.yaml
          
        ChinaMax_Domain: # 中国大陆 IP 地址列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/ChinaMax/ChinaMax_Domain.yaml"
          path: ./ruleset/ChinaMax_Domain.yaml
          interval: 86400

        ChinaMax_IP: # 中国大陆 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/ChinaMax/ChinaMax_IP.yaml"
          path: ./ruleset/ChinaMax_IP.yaml
          interval: 86400

        ChinaMax: # 中国大陆 IP 地址列表
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/ChinaMax/ChinaMax.yaml"
          path: ./ruleset/ChinaMax.yaml
          interval: 86400

        Lan: 
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Lan/Lan.yaml"
          path: ./ruleset/Lan.yaml
          interval: 86400

        Download: 
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/Download/Download.yaml"
          path: ./ruleset/Download.yaml
          interval: 86400

        PrivateTracker: 
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/HAMAN23333/ios_rule_script@master/rule/Clash/PrivateTracker/PrivateTracker.yaml"
          path: ./ruleset/PrivateTracker.yaml
          interval: 86400
